package model;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;

import tools.LinkComparator;
import tools.NodeComparator;
import edu.uci.ics.jung.graph.Graph;
import edu.uci.ics.jung.graph.util.EdgeType;
import edu.uci.ics.jung.graph.util.Pair;
import model.components.Link;
import model.components.NF;
import model.components.Node;
import model.components.RequestLink;
import model.components.RequestRouter;
import model.components.RequestSwitch;
import model.components.Server;
import model.components.VirtualMachine;


/**
 * Request Class. Subclass of Network.
 */
public class Request extends Network {
	
	private String domain; 
	private String InP;
	private int startDate;
	private int endDate;
	private List<Request> subReq;
	private double trustThr = 0;
	
	/** Not used yet **/
	private float resiliency;
	/** Not used yet **/
	private boolean splittable;
	private ResourceMapping rmap;
	private ResourceMappingNF rmapNF;
	
    /** Creates a new instance of Request */
    public Request(String id) {
    	super(id);
    	nodeFactory = new RequestNodeFactory();
    	linkFactory = new RequestLinkFactory();
    	/** Setting default values **/
    	resiliency = 0;
    	splittable = false;
    	trustThr=0;
    	this.rmap= new ResourceMapping(this);
    	this.rmapNF= new ResourceMappingNF(this);
    }

	public String getDomain() {
		return domain;
	}

	public void setDomain(String domain) {
		this.domain = domain;
	}
	
	public String getInP() {
		return InP;
	}

	public void setInP(String InP) {
		this.InP = InP;
	}

	public int getStartDate() {
		return startDate;
	}

	public void setStartDate(int startDate) {
		this.startDate = startDate;
	}

	public int getEndDate() {
		return endDate;
	}
	public double getTrustThr() {
		return trustThr;
	}
	public void setTrustThr(double thr) {
		this.trustThr = thr;
	}
	public void setEndDate(int endDate) {
		this.endDate = endDate;
	}
	
	public List<Request> getSubReq(){
		return subReq;
	}
	
	public void setSubReq(List<Request> subReq){
		this.subReq=subReq;
	}
	
	public void constructJRA23Request() {
		startDate = 0;
	    endDate = 12;
	    // Nodes and links of the request are generated by random factories
	    RequestNodeFactory nodeFactory = new RequestNodeFactory();
	    RequestLinkFactory linkFactory = new RequestLinkFactory();
	    this.setNodeFactory(nodeFactory);
	    this.setLinkFactory(linkFactory);
	     
	    // router0
	    RequestRouter r0 = (RequestRouter) nodeFactory.create("router");
	    // router1
	    RequestRouter r1 = (RequestRouter) nodeFactory.create("router");
	    // sw0
	    RequestSwitch sw0 = (RequestSwitch) nodeFactory.create("switch");
	    // sw1
	    RequestSwitch sw1 = (RequestSwitch) nodeFactory.create("switch");
	    // sw2
	    RequestSwitch sw2 = (RequestSwitch) nodeFactory.create("switch");
	    // vm0
	    VirtualMachine vm0 = (VirtualMachine) nodeFactory.create("virtualMachine");
	    // vm1
	    VirtualMachine vm1 = (VirtualMachine) nodeFactory.create("virtualMachine");
	    // vm2
	    VirtualMachine vm2 = (VirtualMachine) nodeFactory.create("virtualMachine");
	    // vm3
	    VirtualMachine vm3 = (VirtualMachine) nodeFactory.create("virtualMachine");
	    // vm4
	    VirtualMachine vm4 = (VirtualMachine) nodeFactory.create("virtualMachine");
	    // vm5
	    VirtualMachine vm5 = (VirtualMachine) nodeFactory.create("virtualMachine");
	    // vm6
	    VirtualMachine vm6 = (VirtualMachine) nodeFactory.create("virtualMachine");
	    // vm7
	    VirtualMachine vm7 = (VirtualMachine) nodeFactory.create("virtualMachine");

	    // Adding Links with random bw
	    //vm0-sw0
	    RequestLink requestLink = (RequestLink) linkFactory.create();
	    graph.addEdge(requestLink,new Pair<Node>(vm0,sw0), EdgeType.UNDIRECTED);
	    //vm1-sw0
	    requestLink = (RequestLink) linkFactory.create();
	    graph.addEdge(requestLink,new Pair<Node>(vm1,sw0), EdgeType.UNDIRECTED);
	    //vm2-sw1
	    requestLink = (RequestLink) linkFactory.create();
	    graph.addEdge(requestLink,new Pair<Node>(vm2,sw1), EdgeType.UNDIRECTED);
	    //vm3-sw1
	    requestLink = (RequestLink) linkFactory.create();
	    graph.addEdge(requestLink,new Pair<Node>(vm3,sw1), EdgeType.UNDIRECTED);
	    //vm4-sw2
	    requestLink = (RequestLink) linkFactory.create();
	    graph.addEdge(requestLink,new Pair<Node>(vm4,sw2), EdgeType.UNDIRECTED);
	    //vm5-sw2
	    requestLink = (RequestLink) linkFactory.create();
	    graph.addEdge(requestLink,new Pair<Node>(vm5,sw2), EdgeType.UNDIRECTED);
	    //vm6-r1
	    requestLink = (RequestLink) linkFactory.create();
	    graph.addEdge(requestLink,new Pair<Node>(vm6,r1), EdgeType.UNDIRECTED);
	    //vm7-r1
	    requestLink = (RequestLink) linkFactory.create();
	    graph.addEdge(requestLink,new Pair<Node>(vm7,r1), EdgeType.UNDIRECTED);
	    //r0-r1
	    requestLink = (RequestLink) linkFactory.create();
	    graph.addEdge(requestLink,new Pair<Node>(r0,r1), EdgeType.UNDIRECTED);
	    //r0-sw0
	    requestLink = (RequestLink) linkFactory.create();
	    graph.addEdge(requestLink,new Pair<Node>(r0,sw0), EdgeType.UNDIRECTED);
	    //r0-sw1
	    requestLink = (RequestLink) linkFactory.create();
	    graph.addEdge(requestLink,new Pair<Node>(r0,sw1), EdgeType.UNDIRECTED);
	    //r0-sw2
	    requestLink = (RequestLink) linkFactory.create();
	    graph.addEdge(requestLink,new Pair<Node>(r0,sw2), EdgeType.UNDIRECTED);
	}
	
	
	public Object getCopy() {
    	Request r = new Request(this.getId());
    	r.state = this.state;
    	r.nodeFactory = (RequestNodeFactory) ((RequestNodeFactory) this.nodeFactory).getCopy();
    	r.linkFactory = (RequestLinkFactory) ((RequestLinkFactory) this.linkFactory).getCopy();
    	r.graph = getCopyGraph();
    	//r.graph = ((NetworkGraph) this.graph).getCopy();
    	r.graphLayout = this.graphLayout;
    	r.domain = this.domain;
    	r.resiliency = this.resiliency;
    	r.splittable = this.splittable;
    	r.startDate = this.startDate;
    	r.endDate = this.endDate;
    	return r;
    }
	
	public Graph<Node, Link> getCopyGraph() {
		NetworkGraph g = new NetworkGraph();
		for (Link link : this.graph.getEdges()) {
			Link l = (Link) link.getCopy();
			Pair<Node> endpoints = this.graph.getEndpoints(link);
			Node n1 = g.getVertexByName(endpoints.getFirst().getName());
			if (n1==null)
				n1 = (Node) endpoints.getFirst().getCopy();
			Node n2 = g.getVertexByName(endpoints.getSecond().getName());
			if (n2==null)
				n2 = (Node) endpoints.getSecond().getCopy();
			g.addEdge(l,n1,n2);
		}
		return g;
	}
	
	
	@SuppressWarnings("unchecked")
	public void print(){
		ArrayList<Node> nodes = new ArrayList<Node> (this.getGraph().getVertices());
		ArrayList<Link> links = new ArrayList<Link> (this.getGraph().getEdges());
		//ArrayList<Node> nodes =(ArrayList<Node>)getNodes(this.getGraph());
		//ArrayList<Link> links =(ArrayList<Link>) getLinks(this.getGraph());
		
		Collections.sort(nodes,new NodeComparator());
		Collections.sort(links,new LinkComparator());	
		
		System.out.println("Id: " + this.id);
		System.out.println("****************************Request Nodes**************************");
		
		
		for (Node current : nodes){
			System.out.print("["  +  current.getId() + ": " + current.getName()+" " );
		if ((current) instanceof Server  )  
			System.out.println(((Server)current).getAvailableCpu()+" "+ ((Server)current).getMemory()+" "+((Server)current).getDiskSpace()+"]");	
		else if  ((current) instanceof NF  )  
			System.out.println(((NF)current).getAvailableCpu()+"  ]");
		else
			System.out.println( (current).getCoords().getX()+ " " + (current).getCoords().getY()+"  ]");
	  }
		System.out.println("****************************Request Links**************************");
		for (Link current : links){
			Pair<Node> currentNodes =this.getGraph().getEndpoints(current);
			System.out.println("Link: " + current.getId()+ ": " +current.getBandwidth() +":" +currentNodes.getFirst() + "->"+currentNodes.getSecond());
		}
    }
	
    public ArrayList<Link> getLinks(Graph<Node,Link> t) {
		ArrayList<Link> reqLink =new ArrayList<Link>();
		Collection<Link> edges =  t.getEdges();

		for (Link current : edges)
			reqLink.add(current);
		
		return reqLink;
	}
	
	public ArrayList<Node> getNodes(Graph<Node,Link> t) {
		ArrayList<Node> reqNodes =new ArrayList<Node>();
		Collection<Link> edges =  t.getEdges();

		for (Link current : edges){
			Pair<Node> currentNodes =t.getEndpoints(current);
			if (reqNodes.contains(currentNodes.getFirst())==false)
				reqNodes.add(currentNodes.getFirst());
			if (reqNodes.contains(currentNodes.getSecond())==false)
				reqNodes.add(currentNodes.getSecond());
		}


		return reqNodes;
	}
	
	
	 public void setRMap (ResourceMapping r){ this.rmap=r; }
	 public ResourceMapping getRMap (){ return  this.rmap; }
	 
	 public void setRMapNF (ResourceMappingNF r){ this.rmapNF=r; }
	 public ResourceMappingNF getRMapNF (){ return  this.rmapNF; }
}

